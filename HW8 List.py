# 1.Выведите все четные элементы списка. При этом используйте цикл for,
# перебирающий элементы списка, а не их индексы!
"""lst = [1,2,2,5,20,1,3,22,24,65,77,88]
for i in lst:
    if i%2 == 0:
        print(i)"""
# 2.Задано два списка. Найти наименьшие среди элементов первого списка,
# которые не входят во второй список.
import random

"""lst1 = [2,4,6,8,]
lst2 = [3,5,7,9,3,5]
c = [] #создаём заранее пустой список
for el in lst2: #перебираю все элементы в списке а
    if el not in lst1: 
        if el not in c:  # включаем ещё одну дополнительную проверку, чтобы не задвоить элемент
            c.append(el)  # то мы добавляем этот элемент в список
if c ==[]:
    print("не найдено")
print(c)
print(min(c))"""
#Решение от Дениса, чтобы уесть случай, если все элементы повторяются
"""lst1 = [1,2,3,7,9]
lst2 = [0,1,2,7,9]
m = None# переменная "пустота"
for i in lst1:
    if i not in lst2:
            if not m is None:# если m не пустота
                if i<m:
                    m = i
            else:
                  m=i
print(m)
"""

#Та же задача. Решение выводт индексы цифр, а не цифры.
"""lst1 = [2,4,6,8,]
lst2 = [3,5,7,9,3,5]
c = [] #создаём заранее пустой список
for el in range (len(lst2)): #перебираю все элементы в списке а
    if lst2[el] not in lst1: #and lst2[el]<lst2[el-1]:#если элемент есть в списке
        if el not in c:  # включаем ещё одну дополнительную проверку, чтобы не задвоить элемент
            c.append(el)  # то мы добавляем этот элемент в список
print(c)
print(min(c))"""
# 3.Задан список из k чисел. Определить количество инверсий в списке
# (т. е. таких пар элементов, в которых большее число находится слева от меньшего).
"""lst = [1,2,5,5,50,1,3,22,14,65,73,88,513]
c = []
count = 0 #переменная для подсчёта инверсий
for i in lst:
    if i //10!=0:
        c.append(i)
print(c)
for i in c:
    if i%10 < i//10:
        print(i)
        count +=1
print(count)"""

    # 4.Программе подаётся на вход произвольная строка.
# Удалите из нее повторяющиеся символы (т. е. символы, встречающиеся в строке
# во второй или более раз) и выведите результат на экран. Задачу решить через список.
# Sample Input 1:# Ха-ха-ха-ха
# Sample Output 1: Ха-х
"""lst = ["L",12,"l",12,1,"l"]
c = [] #создаём заранее пустой список
for el in lst: #перебираю все элементы в списке а
      if el not in c:# включаем ещё одну дополнительную проверку, чтобы не задвоить элемент
           c.append(el)#то мы добавляем этот элемент в список
print(c)"""
#5.Дан список . Вставить после каждого чётного числа его перевёртыш.
#НЕ РЕШИЛА ДО КОНЦА! НЕ ЗНАЮ КАК СДЕЛАТ ПЕРЕВЁРТЫШ!

# lst = ["я", "люблю", "тебя"]#это решение со словами работает а как с цифрами???
# new_lst = [i[::-1] for i in lst]
# print(new_lst)
#C цифрами не работает так:
# lst =[2, 3, 2, 9, 24, 87, 68, 23]
# lst1 = str(lst)
# lst1 = [i[::-1] for i in lst1]
# print(lst1)

"""lst = [2,2,24,68,7,990,8802]
c = []
for el in lst:
    if el % 2 == 0:
        c.append(el)
print(c)
c.extend(lst)
print(c)
c.sort()
print(c)
for i in range (len(c)):
    if c[i] == c[i-1]:
        c[i] = "!"
print(c)"""
#РЕШЕИЕ ОТ ДЕНИСА
lst = [14,5,2,188,31,10]
i = 0
while i < len(lst):
    if lst[i]%2 ==0:
        print(lst[i])
        s = str(lst[i])#вводим доп переменную, преобразовали i в строку
        s = s[::-1] #перевернули строку
        print(s) #для проверки выводим перевёрнутое число
        lst.insert(i+1,int(s)) #int(s)  = возвращаем численный формат и вставляем в нужное место
        i +=1
    i +=1
print(lst)

#ПРАВИЛЬНОЕ РЕШЕНИЕ ОТ ТАНИ
# lst = []
# el = ''
# n = int(input("введите количество элементов списка:"))
# for i in range (0,n):
#     k = random.randint(0,1000)
#     print('k',k)
#     lst.insert(n+n,k)
#     if k%2 ==0:
#         k = str(k)
#         el = int(k[::-1])
#         lst.insert(n+n,el)
# print(lst)
#То же самое, по индексам
"""lst=[1,6,8,58,41,63,24,75,36,84]
k=0
i=0
while i!=len(lst):
     if lst[i]%2==0:
          k=str(lst[i])
          k=int(k[::-1])
          lst.insert(i+1,k)
          i+=2
     else:
         i+=1

print('Список с инверсией четных чисел:',lst)"""

#Дополнительные задачи:

#6.Дан список . Вычислить сколько раз в нем встречается каждый элемент, не используя сортировки.
"""lst = [2, 2, 24, 68, 990, 8802, 2, 2, 24, 68]
c = []#чтобы исключить задвоение в выводе данных, создади м новый список, в котором будут все наши элементы, но без задвоений
for i in lst:
    if i not in c:  #создаём список без задвоений
        c.append(i)
#print(c)# можно вывести новый список для самопроверки
for i in c:#берём только те элементы, которые не задваиваются, поэтому идём по новому списку
    # if i in lst:
    lst.count(i)#и считаем эти элементы в старом списке
    print(i,"встречается",lst.count(i), "раз")"""
#Решение от Дениса
"""lst = [1,2,2,5,6,7,6,7,7]
lst2 = []
for i in range (len(lst)):#через индексы решаем
    if i == lst.index(lst[i]):#если первое вхождение. то мы его выодим
        print(f"{i} - {lst.count(lst[i])}")"""


#7.Дан список . Перезаписать его так, чтобы сначала были все положительные числа,
# а затем все отрицательные и нули, сохраняя порядок их следования.
"""lst = [2,-2, 24, -68, 990, 8802, 0, 23, 52,0]
# lst.sort()
# print(lst)
c = []
d = []
e = []
for item in lst:
    if item<0:
        c.append(item)
print(c)
for item in lst:
    if item==0:
        d.append(item)
print(d)
for item in lst:
    if item>0:
        e.append(item)
print(e)
new_lst = (e+c+d)
print(new_lst)"""
#Решение от Дениса:
"""lst = [2,5,-5,-7,1,8,-1]
i = 0
l = len(lst)
while i < l:
    if lst[i] <= 0:
        lst.append(lst[i]) #вставляем в конец списка
        del lst[i] #удаляем этот найденный элемент из списка, чтобы сохранить длину списка
        i -=1 #проверять нужно не следуюий элемент, а предыдущий, так как на это место стал следующий 
        # элемент, например
        l -= 1# длину уменьшаем на единицу, отсекая уже введённый в конце элемент
    i +=1
print(lst)
    """




#8.Дан список . Продублировать все неповторяющиеся элементы.

#Я решила, но если элемент будет записан три и больше раз, то не работает.!!!!
"""lst = [2, 2, 24, 68, 990, 8802, 23, 52]
c = []
for el in lst:
    if el not in c:
        c.append(el)
print(c)
d =  (c+c)
d.sort()
print(d)"""

#9.Дан список . Перезаписать его так, чтобы чётные элементы чередовались с нечётными
"""lst = [2, 3, 2, 24, 68, 9, 87, 23, 52]
c = []
d = []
for item in lst:
    if item%2==0:
        c.append(item)
    if item%2!=0:
        d.append(item)
print(c,d)
#то же самое, другая запись и один список, сначала чётные все, потом нечётные все
for i in lst:
    res = [i for i in lst if not i%2] + [i for i in lst if i%2]
print(res)"""
# Ответ:  [2, 2, 24, 68, 52] [3, 9, 87, 23]
#         [2, 2, 24, 68, 52, 3, 9, 87, 23]
#НИЖЕ РЕШЕНО КАК СДЕЛАТЬ ЧЕРЕДОВАНИЕ ПО КАЖДОМУ ЭЛЕМЕНТУ:
"""lst = [2, 3, 2, 24, 68, 9, 87, 23, 52]
c = []
d = []
for item in lst:
    if item%2==0:
        c.append(item)
    if item%2!=0:
        d.append(item)
print(c,d) #разделили на 2 списка - чётный и нечётный
#Если количество элементов равное в 2х списках, то подойдёт решение по парам:
print([i for pair in zip(c,d) for i in pair]) #взято с формуа, zip ещё не проходили, но удобно
#Если количество элементов разное, то решать лучше, задавая вывод элементов через один:
e = c+d
e[::2] = c #каждый второй элемент в новом списке будет из списка с
e[1::2] = d #каждый первый элемент в новом списке будет из списка D
print(e)"""

#Решение от Денса:
"""lst = [1,5,6,8,9,10,2,9,1]
#будем искать ближайшие чётные и нечётные цифры и ставить их на мето друг друга
#ищем по индексам!
for i in range(len(lst)):
    if i % 2 == 0 and lst[i]%2 == 1: # проверяем что индекс чётный а число нечётное
        for j in range (i+1, len(lst)):#от следующего элемента до длины списка
            if lst[j] % 2 == 0:
                lst[i], lst[j] = lst[j], lst[i] # меняем местами
                break
    if i % 2 == 1 and lst[i]%2 == 0: # проверяем что индекс нечётный а число чётное
        for j in range (i+1, len(lst)):#от следующего элемента до длины списка
            if lst[j] % 2 == 1:
                lst[i], lst[j] = lst[j], lst[i]
                break
print(lst)  """




#10.Ваш отдел работает над приложением, обращающимся к некоторому серверу.
# Вам поручили реализовать некоторые запросы: GET, POST и DELETE.
# В контексте вашего приложения POST-запрос добавляет строку на сервер,
# GET-запрос возвращает последнюю добавленную строку,
# а DELETE-запрос удаляет последнюю добавленную строку.
# Дан список команд с запросами (GET и DELETE не принимают параметров,
# а POST принимает строку или число), список команд прерывается точкой.
# Выведите, что возвращает сервер, а также строки, которые остались в списке, разделяя их через пробел.
#Sample Input:
#POST 12
#POST 15
#POST 81
#GET
#DELETE
#DELETE
#POST Stack Overflow
#POST Recursion
#DELETE
#GET
#.
#Sample Output:
#81
#Stack Overflow
 #ЭТУ ЗАДАЧУ Я НЕ ПОнИМАЮ УСЛОВИЯ

"""lst = []
s = input("enter string")
while s != ".": #пока не введем точку, программа запрашивает ввод строк, точкой мы орываем цикл
    s = s.split(maxsplit=1)# сделать список из строки, чтобы каждое слово было списком и сплитовать
    #мы будем только 1 раз
    if len(s) == 2:
        lst.append(s[1])
    elif s[0] == "GET":
        print(lst[-1])
    elif s[0] == "DELITE":
        del lst [-1]
    s = input("enter string")
print(lst)"""

