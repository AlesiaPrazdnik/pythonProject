#Создать кортеж с цифрами от 0 до 9 и посчитать сумму
# s = 1,2,3,4,5,6,7,8,9
# tup = tuple(s)
# print(tup)
# print(sum(s))

#Выведите статистику частности букв в кортеже
# tup =("t","t","f","t","a","a","a","f")
# print(tup.count("a"), tup.count("f"), tup.count("t"))
#Допишите скрипт для расчёта средней температуры. Посчитать количество дней на основе вводных данных

"""s = (26,29,34,32,28,26,23)
sum_temp = sum(s)
days = (s.index(s[-1]))+1 #можно вывести len(s)
print(days)
mean_temp = sum_temp/days
print(int(mean_temp))"""

#HOME WORK

#1.Дан кортеж. Вывести все его совершенные числа.
"""s = (1,2,6,13,28,15,496)
for j in s:
    c =[]
    count = 0  # вводим переменную для подсчёта количества действий ( количества делителей)
    for i in range(1, j+1):  # перебор всех чисел от 1 до  нашего числа j включительно
        if j % i == 0:  # если делится  на i без остатка
            c.append(i)
            if sum(c) == j:
                print("совершенное число",j)"""

#2. Элементы кортежа числа и строки. Все строки в кортеже сделать перевёртышами а числа умножить на два. #
# Дополнительных списков не создавать!!!
#НЕ РЕШИЛА
# Это решение просто всё переворачивает
# Как отделить слова от цифр???
# tup = (1,2,"hello",13,"word")
# i = 0
# while i < len(tup):
#         s = str(tup[i])#вводим доп переменную, преобразовали i в строку
#         s = s[::-1] #перевернули строку
#         print(s) #для проверки выводим перевёрнутое число
#         i +=1
# print(tup)




#3. Дан кортеж. Найти разность между его максимальным и минимальный элементом.
"""s = (1,2,6,13,28)
s_max = max(s)
s_min = min(s)
dif = int(s_max) - int(s_min)
print(dif)"""

#4. Ввести список с клавиатуры. Список преобразовать в кортеж. Посчитать количество элементов между максимальным и минимальным.
"""list = [28,6,13,1]
s = tuple(list)
s_max = max(s)
s_min = min(s)
ind1 = s.index(max(s))
print(ind1)
ind2 = s.index(min(s))
print(ind2)
if int(ind2)> int(ind1):
    dif = int(ind2) - int(ind1) - 1
if int(ind2)< int(ind1):
    dif = int(ind1) - int(ind2) - 1
print(dif)"""
#ЭТО ПРОЩЕ РЕШЕНИЕ ТОЙ ЖЕ ЗААЧИ:
"""list = [28,6,13,1]
print(list.sort())
s = tuple(list)
print(s)
sum2 = len(s)-2 
print(sum2)"""

#5. Дан кортеж. Написать программу, определяющую сколько раз менялся знак в кортеже.
"""s = (-1,0,1,1,-4,-5,9)
count = 0
for i in range(len(s)):
    if (s[i]>=0 and s[i-1]<0) or (s[i]<=0 and s[i-1]>0):
        count +=1
print(count)"""

#6. Дан кортеж. Вывести на экран все простые числа в данном кортеже.
"""s = (1,2,6,13,28)
for j in s:
    count = 0  # вводим переменную для подсчёта количества действий ( количества делителей)
    for i in range(1, j+1):  # перебор всех чисел от 1 до  нашего числа j включительно
        if j % i == 0:  # если делится  на i без остатка
            count += 1  # увеличивается количество подсчётов
    if count <= 2:  # делителя всего 2
        print(j,end=" ")"""
#7. Дан кортеж. Посчитать сумму элементов между максимальным и минимальным не включая эти элементы.
"""list = [28,6,13,1]
print(list.sort())
s = tuple(list)
print(s)
sum1 = sum(s)-s[0]-s[-1] #это если речь шла о сумме значений элементов
print(sum1)
sum2 = len(s)-2 #Это если о количестве элементов спрашивается
print(sum2)"""

#8. Дан кортеж. Найти максимальную по длине монотонную последовательность( убывающую или возрастающую) чисел.
#НЕ ДОРЕШАЛА
# tup = (1,2,3,4,3,2,2,3,3,4,4,5,5,3,2,1)
# s = list(tup)
# print(s)
# count = 0
# for i in range(len(s)):
#
#     if s[i]>s[i-1] or s[i]==s[i-1]:
#         count += 1
#         print(int(i), count)
#     if s[i] < s[i - 1]:
#         break
# i +=1
#как теперь вернуть к началу цикла?

# tup = (1,2,3,4,3,2,2,3,3,4,4,5,5,3,2,1)
# s = list(tup)
# print(s)
# count = 0
# for i in range(len(s)):
#     while s[i]>=s[i-1]:
#         count += 1
#         print(int(i), count)
#     if s[i]<s[i-1]:
#         break



#9. Дан кортеж. Без функций и дополнительных списков вывести все повторяющиеся элементы.
# (count не использовать).
#РЕШЕНИЕ С COUNT:
# tup = (1,3,1,4,4,5,6,7,8,1)
# for i in range (0,len(tup)):
#     if i == tup.index(tup[i]) and tup.count(tup[i])>1:
#
#         print(tup[i], end = "")

